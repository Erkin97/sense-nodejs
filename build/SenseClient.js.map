{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"grpc\"","webpack:///./proto/SenseClient_pb.js","webpack:///./src/Sense.ts","webpack:///./src/SamplingFormat.ts","webpack:///./src/SenseClient.ts","webpack:///./proto/SenseClient_grpc_pb.js","webpack:///external \"google-protobuf\"","webpack:///./src/FileSense.ts","webpack:///./src/StreamSense.ts","webpack:///./src/StreamChunkToBuffer.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","jspb","goog","global","Function","exportSymbol","proto","sense","full","v1","Request","opt_data","Message","initialize","this","inherits","DEBUG","COMPILED","displayName","GENERATE_TO_OBJECT","toObject","opt_includeInstance","includeInstance","msg","obj","data","getData_asB64","task","getFieldWithDefault","apikey","format","clientVersion","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","getFieldNumber","readBytes","setData","readString","setTask","setApikey","setFormat","setClientVersion","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","f","undefined","getData_asU8","length","writeBytes","getTask","writeString","getApikey","getFormat","getClientVersion","getData","bytesAsB64","bytesAsU8","setProto3BytesField","setProto3StringField","RequestStream","dtype","sr","setDtype","readInt32","setSr","getDtype","getSr","writeInt32","setProto3IntField","Response","outputs","setOutputs","getOutputs","extend","Sense","callbackAdaptor","callback","error","response","json","JSON","parse","metadata","Metadata","timeout","Date","setSeconds","getSeconds","TIMEOUT","set","toString","SamplingFormat","samplingFormatToByteCount","samplingFormat","Int8Bit","Float8Bit","Int16Bit","Float16Bit","Int32Bit","Float32Bit","Int64Bit","Float64Bit","Error","samplingFormatToNumberType","apiKey","host","grpcClient","SenseClient","credentials","createInsecure","buffer","extension","AudioFileConnection","stream","samplingRate","AudioStreamConnection","grpc","SenseClient_pb","serialize_sense_full_v1_Response","arg","Buffer","from","deserialize_sense_full_v1_Response","buffer_arg","Uint8Array","SenseService","path","requestStream","responseStream","requestType","responseType","requestSerialize","requestDeserialize","responseSerialize","responseDeserialize","sense_stream","makeGenericClientConstructor","super","sendData","timeOutMetadata","getTimeOut","requestsIterator","createRequestIterator","request","write","end","BUFFER_SIZE","segment","slice","rate","sendStream","onResult","streamChunkToBuffer","on","chunk","push","isBufferReady","consumeBuffer","dataType","getSamplingFormat","createRequest","closeGrpcConnection","closeOnError","err","StreamChunkToBuffer","bufferIndex","filledBuffers","samplingSize","bufferSize","SENDING_RATE","chunkIndex","sizeToCopy","Math","min","shift"],"mappings":"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","file":"SenseClient.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = require(\"grpc\");","/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\ngoog.exportSymbol('proto.sense.full.v1.Request', null, global);\ngoog.exportSymbol('proto.sense.full.v1.RequestStream', null, global);\ngoog.exportSymbol('proto.sense.full.v1.Response', null, global);\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.sense.full.v1.Request = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.sense.full.v1.Request, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.sense.full.v1.Request.displayName = 'proto.sense.full.v1.Request';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.sense.full.v1.Request.prototype.toObject = function(opt_includeInstance) {\n  return proto.sense.full.v1.Request.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.sense.full.v1.Request} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.sense.full.v1.Request.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    data: msg.getData_asB64(),\n    task: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    apikey: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\n    format: jspb.Message.getFieldWithDefault(msg, 4, \"\"),\n    clientVersion: jspb.Message.getFieldWithDefault(msg, 8, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.sense.full.v1.Request}\n */\nproto.sense.full.v1.Request.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.sense.full.v1.Request;\n  return proto.sense.full.v1.Request.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.sense.full.v1.Request} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.sense.full.v1.Request}\n */\nproto.sense.full.v1.Request.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setData(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setTask(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setApikey(value);\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setFormat(value);\n      break;\n    case 8:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setClientVersion(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.sense.full.v1.Request.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.sense.full.v1.Request.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.sense.full.v1.Request} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.sense.full.v1.Request.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getData_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getTask();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getApikey();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f = message.getFormat();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n  f = message.getClientVersion();\n  if (f.length > 0) {\n    writer.writeString(\n      8,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes data = 1;\n * @return {!(string|Uint8Array)}\n */\nproto.sense.full.v1.Request.prototype.getData = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes data = 1;\n * This is a type-conversion wrapper around `getData()`\n * @return {string}\n */\nproto.sense.full.v1.Request.prototype.getData_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getData()));\n};\n\n\n/**\n * optional bytes data = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getData()`\n * @return {!Uint8Array}\n */\nproto.sense.full.v1.Request.prototype.getData_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getData()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.sense.full.v1.Request.prototype.setData = function(value) {\n  jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional string task = 2;\n * @return {string}\n */\nproto.sense.full.v1.Request.prototype.getTask = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.sense.full.v1.Request.prototype.setTask = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional string apikey = 3;\n * @return {string}\n */\nproto.sense.full.v1.Request.prototype.getApikey = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/** @param {string} value */\nproto.sense.full.v1.Request.prototype.setApikey = function(value) {\n  jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n/**\n * optional string format = 4;\n * @return {string}\n */\nproto.sense.full.v1.Request.prototype.getFormat = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/** @param {string} value */\nproto.sense.full.v1.Request.prototype.setFormat = function(value) {\n  jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n/**\n * optional string client_version = 8;\n * @return {string}\n */\nproto.sense.full.v1.Request.prototype.getClientVersion = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, \"\"));\n};\n\n\n/** @param {string} value */\nproto.sense.full.v1.Request.prototype.setClientVersion = function(value) {\n  jspb.Message.setProto3StringField(this, 8, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.sense.full.v1.RequestStream = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.sense.full.v1.RequestStream, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.sense.full.v1.RequestStream.displayName = 'proto.sense.full.v1.RequestStream';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.sense.full.v1.RequestStream.prototype.toObject = function(opt_includeInstance) {\n  return proto.sense.full.v1.RequestStream.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.sense.full.v1.RequestStream} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.sense.full.v1.RequestStream.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    data: msg.getData_asB64(),\n    task: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    apikey: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\n    dtype: jspb.Message.getFieldWithDefault(msg, 5, \"\"),\n    sr: jspb.Message.getFieldWithDefault(msg, 6, 0),\n    clientVersion: jspb.Message.getFieldWithDefault(msg, 8, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.sense.full.v1.RequestStream}\n */\nproto.sense.full.v1.RequestStream.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.sense.full.v1.RequestStream;\n  return proto.sense.full.v1.RequestStream.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.sense.full.v1.RequestStream} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.sense.full.v1.RequestStream}\n */\nproto.sense.full.v1.RequestStream.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setData(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setTask(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setApikey(value);\n      break;\n    case 5:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setDtype(value);\n      break;\n    case 6:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setSr(value);\n      break;\n    case 8:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setClientVersion(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.sense.full.v1.RequestStream.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.sense.full.v1.RequestStream.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.sense.full.v1.RequestStream} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.sense.full.v1.RequestStream.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getData_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getTask();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getApikey();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f = message.getDtype();\n  if (f.length > 0) {\n    writer.writeString(\n      5,\n      f\n    );\n  }\n  f = message.getSr();\n  if (f !== 0) {\n    writer.writeInt32(\n      6,\n      f\n    );\n  }\n  f = message.getClientVersion();\n  if (f.length > 0) {\n    writer.writeString(\n      8,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes data = 1;\n * @return {!(string|Uint8Array)}\n */\nproto.sense.full.v1.RequestStream.prototype.getData = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes data = 1;\n * This is a type-conversion wrapper around `getData()`\n * @return {string}\n */\nproto.sense.full.v1.RequestStream.prototype.getData_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getData()));\n};\n\n\n/**\n * optional bytes data = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getData()`\n * @return {!Uint8Array}\n */\nproto.sense.full.v1.RequestStream.prototype.getData_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getData()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.sense.full.v1.RequestStream.prototype.setData = function(value) {\n  jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional string task = 2;\n * @return {string}\n */\nproto.sense.full.v1.RequestStream.prototype.getTask = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.sense.full.v1.RequestStream.prototype.setTask = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional string apikey = 3;\n * @return {string}\n */\nproto.sense.full.v1.RequestStream.prototype.getApikey = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/** @param {string} value */\nproto.sense.full.v1.RequestStream.prototype.setApikey = function(value) {\n  jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n/**\n * optional string dtype = 5;\n * @return {string}\n */\nproto.sense.full.v1.RequestStream.prototype.getDtype = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n};\n\n\n/** @param {string} value */\nproto.sense.full.v1.RequestStream.prototype.setDtype = function(value) {\n  jspb.Message.setProto3StringField(this, 5, value);\n};\n\n\n/**\n * optional int32 sr = 6;\n * @return {number}\n */\nproto.sense.full.v1.RequestStream.prototype.getSr = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n};\n\n\n/** @param {number} value */\nproto.sense.full.v1.RequestStream.prototype.setSr = function(value) {\n  jspb.Message.setProto3IntField(this, 6, value);\n};\n\n\n/**\n * optional string client_version = 8;\n * @return {string}\n */\nproto.sense.full.v1.RequestStream.prototype.getClientVersion = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, \"\"));\n};\n\n\n/** @param {string} value */\nproto.sense.full.v1.RequestStream.prototype.setClientVersion = function(value) {\n  jspb.Message.setProto3StringField(this, 8, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.sense.full.v1.Response = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.sense.full.v1.Response, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.sense.full.v1.Response.displayName = 'proto.sense.full.v1.Response';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.sense.full.v1.Response.prototype.toObject = function(opt_includeInstance) {\n  return proto.sense.full.v1.Response.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.sense.full.v1.Response} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.sense.full.v1.Response.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    outputs: jspb.Message.getFieldWithDefault(msg, 7, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.sense.full.v1.Response}\n */\nproto.sense.full.v1.Response.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.sense.full.v1.Response;\n  return proto.sense.full.v1.Response.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.sense.full.v1.Response} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.sense.full.v1.Response}\n */\nproto.sense.full.v1.Response.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 7:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setOutputs(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.sense.full.v1.Response.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.sense.full.v1.Response.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.sense.full.v1.Response} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.sense.full.v1.Response.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOutputs();\n  if (f.length > 0) {\n    writer.writeString(\n      7,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string outputs = 7;\n * @return {string}\n */\nproto.sense.full.v1.Response.prototype.getOutputs = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, \"\"));\n};\n\n\n/** @param {string} value */\nproto.sense.full.v1.Response.prototype.setOutputs = function(value) {\n  jspb.Message.setProto3StringField(this, 7, value);\n};\n\n\ngoog.object.extend(exports, proto.sense.full.v1);\n","import { Metadata } from \"grpc\";\nimport { Response } from \"../proto/SenseClient_pb\";\n\nexport type CallbackType = (error: Error, result: any) => any;\n\nexport abstract class Sense {\n    private static TIMEOUT = 10; // in second\n\n    public abstract event(callback: CallbackType): void;\n    public abstract music(callback: CallbackType): void;\n    public abstract speech(callback: CallbackType): void;\n\n    protected callbackAdaptor = (callback: CallbackType) => (error: Error, response: Response) => {\n        if (error) {\n            callback(error, undefined);\n        } else {\n            const json = JSON.parse(response.getOutputs());\n            callback(error, json);\n        }\n    }\n\n    protected getTimeOut(): Metadata {\n        const metadata = new Metadata();\n        const timeout = new Date().setSeconds(new Date().getSeconds() + Sense.TIMEOUT);\n        metadata.set(\"deadline\", timeout.toString());\n        return metadata;\n    }\n}\n","export enum SamplingFormat {\n    Int64Bit,\n    Int32Bit,\n    Int16Bit,\n    Int8Bit,\n    Float64Bit,\n    Float32Bit,\n    Float16Bit,\n    Float8Bit,\n}\n\nexport namespace SamplingFormat {\n    export function samplingFormatToByteCount(samplingFormat: SamplingFormat): number {\n        switch (samplingFormat) {\n            case SamplingFormat.Int8Bit:\n            case SamplingFormat.Float8Bit:\n                return 1;\n            case SamplingFormat.Int16Bit:\n            case SamplingFormat.Float16Bit:\n                    return 2;\n            case SamplingFormat.Int32Bit:\n            case SamplingFormat.Float32Bit:\n                    return 4;\n            case SamplingFormat.Int64Bit:\n            case SamplingFormat.Float64Bit:\n                    return 8;\n            default:\n                throw new Error(\"Sampling format not recognized\");\n        }\n    }\n\n    export function samplingFormatToNumberType(samplingFormat: SamplingFormat): string {\n        switch (samplingFormat) {\n            case SamplingFormat.Int8Bit:\n            case SamplingFormat.Int16Bit:\n            case SamplingFormat.Int32Bit:\n            case SamplingFormat.Int64Bit:\n                    return \"int\";\n            case SamplingFormat.Float8Bit:\n            case SamplingFormat.Float16Bit:\n            case SamplingFormat.Float32Bit:\n            case SamplingFormat.Float64Bit:\n                    return \"float\";\n            default:\n                throw new Error(\"Sampling format not recognized\");\n        }\n    }\n}\n","import { credentials } from \"grpc\";\nimport { Readable } from \"stream\";\nimport { SenseClient as SenseClientGrpc } from \"../proto/SenseClient_grpc_pb\";\nimport { AudioFileConnection } from \"./FileSense\";\nimport { SamplingFormat } from \"./SamplingFormat\";\nimport { Sense } from \"./Sense\";\nimport { AudioStreamConnection } from \"./StreamSense\";\n\nexport { SamplingFormat };\n\nexport class SenseClient {\n    private grpcClient: SenseClientGrpc;\n    private apiKey: string;\n\n    constructor(apiKey: string, host: string = \"34.80.243.56:50051\") {\n        this.grpcClient = new SenseClientGrpc(host, credentials.createInsecure());\n        this.apiKey = apiKey;\n    }\n\n    public sendFile(buffer: Buffer, extension: string): Sense {\n        return new AudioFileConnection(buffer, extension, this.apiKey, this.grpcClient);\n    }\n\n    public sendStream(stream: Readable, samplingRate: number, samplingFormat: SamplingFormat): Sense {\n        return new AudioStreamConnection(stream, samplingRate, samplingFormat, this.apiKey, this.grpcClient);\n    }\n}\n","// GENERATED CODE -- DO NOT EDIT!\n\n// Original file comments:\n// Subin Lee (sblee@cochlear.ai)\n//\n// Copyright 2019 Cochlear.ai\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n'use strict';\nvar grpc = require('grpc');\nvar SenseClient_pb = require('./SenseClient_pb.js');\n\nfunction serialize_sense_full_v1_Request(arg) {\n  if (!(arg instanceof SenseClient_pb.Request)) {\n    throw new Error('Expected argument of type sense.full.v1.Request');\n  }\n  return Buffer.from(arg.serializeBinary());\n}\n\nfunction deserialize_sense_full_v1_Request(buffer_arg) {\n  return SenseClient_pb.Request.deserializeBinary(new Uint8Array(buffer_arg));\n}\n\nfunction serialize_sense_full_v1_RequestStream(arg) {\n  if (!(arg instanceof SenseClient_pb.RequestStream)) {\n    throw new Error('Expected argument of type sense.full.v1.RequestStream');\n  }\n  return Buffer.from(arg.serializeBinary());\n}\n\nfunction deserialize_sense_full_v1_RequestStream(buffer_arg) {\n  return SenseClient_pb.RequestStream.deserializeBinary(new Uint8Array(buffer_arg));\n}\n\nfunction serialize_sense_full_v1_Response(arg) {\n  if (!(arg instanceof SenseClient_pb.Response)) {\n    throw new Error('Expected argument of type sense.full.v1.Response');\n  }\n  return Buffer.from(arg.serializeBinary());\n}\n\nfunction deserialize_sense_full_v1_Response(buffer_arg) {\n  return SenseClient_pb.Response.deserializeBinary(new Uint8Array(buffer_arg));\n}\n\n\nvar SenseService = exports.SenseService = {\n  sense: {\n    path: '/sense.full.v1.Sense/sense',\n    requestStream: true,\n    responseStream: false,\n    requestType: SenseClient_pb.Request,\n    responseType: SenseClient_pb.Response,\n    requestSerialize: serialize_sense_full_v1_Request,\n    requestDeserialize: deserialize_sense_full_v1_Request,\n    responseSerialize: serialize_sense_full_v1_Response,\n    responseDeserialize: deserialize_sense_full_v1_Response,\n  },\n  sense_stream: {\n    path: '/sense.full.v1.Sense/sense_stream',\n    requestStream: true,\n    responseStream: true,\n    requestType: SenseClient_pb.RequestStream,\n    responseType: SenseClient_pb.Response,\n    requestSerialize: serialize_sense_full_v1_RequestStream,\n    requestDeserialize: deserialize_sense_full_v1_RequestStream,\n    responseSerialize: serialize_sense_full_v1_Response,\n    responseDeserialize: deserialize_sense_full_v1_Response,\n  },\n};\n\nexports.SenseClient = grpc.makeGenericClientConstructor(SenseService);\n","module.exports = require(\"google-protobuf\");","import { SenseClient as SenseClientGrpc } from \"../proto/SenseClient_grpc_pb\";\nimport { Request } from \"../proto/SenseClient_pb\";\nimport { CallbackType, Sense } from \"./Sense\";\n\nexport class AudioFileConnection extends Sense {\n    private static BUFFER_SIZE = 1024 * 1024; // 1 MB\n    private buffer: Buffer;\n    private extension: string;\n    private apiKey: string;\n    private grpcClient: SenseClientGrpc;\n\n    constructor(buffer: Buffer, extension: string, apiKey: string, grpcClient: SenseClientGrpc) {\n        super();\n        this.buffer = buffer;\n        this.extension = extension;\n        this.apiKey = apiKey;\n        this.grpcClient = grpcClient;\n    }\n\n    public event(callback: CallbackType) {\n        this.sendData(\"event\", callback);\n    }\n\n    public speech(callback: CallbackType) {\n        this.sendData(\"speech\", callback);\n    }\n\n    public music(callback: CallbackType) {\n        this.sendData(\"music\", callback);\n    }\n\n    private sendData(task: string, callback: CallbackType) {\n        const timeOutMetadata = this.getTimeOut();\n        const call = this.grpcClient.sense(timeOutMetadata, this.callbackAdaptor(callback));\n\n        const requestsIterator = this.createRequestIterator(task);\n        for ( const request of requestsIterator) {\n            call.write(request);\n        }\n        call.end();\n    }\n\n    private *createRequestIterator(task: string): IterableIterator<Request> {\n        const n = AudioFileConnection.BUFFER_SIZE;\n        for (let i = 0; i < this.buffer.length / n; i++) {\n            const segment = this.buffer.slice(i * n, (i + 1) * n);\n            const request = new Request();\n            request.setApikey(this.apiKey);\n            request.setData(segment);\n            request.setFormat(this.extension);\n            request.setTask(task);\n            yield request;\n        }\n        return;\n    }\n}\n","import { Readable } from \"stream\";\nimport { SenseClient as SenseClientGrpc } from \"../proto/SenseClient_grpc_pb\";\nimport { RequestStream, Response } from \"../proto/SenseClient_pb\";\nimport { SamplingFormat } from \"./SamplingFormat\";\nimport { CallbackType, Sense } from \"./Sense\";\nimport StreamChunkToBuffer from \"./StreamChunkToBuffer\";\n\nexport class AudioStreamConnection extends Sense {\n    private rate: number;\n    private apiKey: string;\n    private grpcClient: SenseClientGrpc;\n    private stream: Readable;\n    private samplingFormat: SamplingFormat;\n\n    constructor(stream: Readable,\n                rate: number,\n                samplingFormat: SamplingFormat,\n                apiKey: string,\n                grpcClient: SenseClientGrpc) {\n        super();\n        this.rate = rate;\n        this.apiKey = apiKey;\n        this.grpcClient = grpcClient;\n        this.stream = stream;\n        this.samplingFormat = samplingFormat;\n    }\n\n    public event(callback: CallbackType) {\n        this.sendStream(\"event\", callback);\n    }\n\n    public speech(callback: CallbackType) {\n        this.sendStream(\"speech\", callback);\n    }\n\n    public music(callback: CallbackType) {\n        this.sendStream(\"music\", callback);\n    }\n\n    private sendStream(task: string, callback: CallbackType) {\n        const timeOutMetadata = this.getTimeOut();\n        const call = this.grpcClient.sense_stream(timeOutMetadata);\n\n        const onResult = this.callbackAdaptor(callback);\n        const streamChunkToBuffer = new StreamChunkToBuffer(this.rate, this.samplingFormat);\n\n        this.stream.on(\"data\", (chunk: Uint8Array) => {\n            streamChunkToBuffer.push(chunk);\n            while (streamChunkToBuffer.isBufferReady()) {\n                const buffer = streamChunkToBuffer.consumeBuffer();\n                const dataType = streamChunkToBuffer.getSamplingFormat();\n                const request = this.createRequest(buffer, task, dataType);\n                call.write(request);\n            }\n        });\n\n        call.on(\"data\", (response: Response) => {\n            onResult(undefined, response);\n        });\n\n        const closeGrpcConnection = () => { call.end(); };\n\n        call.on(\"close\", closeGrpcConnection);\n        call.on(\"end\", closeGrpcConnection);\n        this.stream.on(\"close\", closeGrpcConnection);\n        this.stream.on(\"end\", closeGrpcConnection);\n\n        const closeOnError = (err: Error) => {\n            onResult(err, undefined);\n            closeGrpcConnection();\n        };\n\n        this.stream.on(\"error\", closeOnError);\n        call.on(\"error\", closeOnError);\n    }\n\n    private createRequest(buffer: Uint8Array, task: string, dataType: string): RequestStream {\n        const request = new RequestStream();\n        request.setApikey(this.apiKey);\n        request.setData(buffer);\n        request.setTask(task);\n        request.setSr(this.rate);\n        request.setDtype(dataType);\n        return request;\n    }\n}\n","import { SamplingFormat } from \"./SamplingFormat\";\n\nexport default class StreamChunkToBuffer {\n    private static readonly SENDING_RATE = 2; // Buffer will be 1/SENDING_RATE seconds long\n    private readonly bufferSize: number;\n    private buffer: Uint8Array;\n    private bufferIndex = 0;\n\n    private filledBuffers: Uint8Array[] = [];\n    private samplingFormat: SamplingFormat;\n\n    constructor(samplingRate: number, samplingFormat: SamplingFormat) {\n        // Sending every 0.5 second (Rate / 2) a 32bit information: 4 Bytes\n        const samplingSize = SamplingFormat.samplingFormatToByteCount(samplingFormat);\n        this.bufferSize = samplingRate * samplingSize / StreamChunkToBuffer.SENDING_RATE;\n        this.buffer = new Uint8Array(this.bufferSize);\n        this.samplingFormat = samplingFormat;\n    }\n\n    public push(chunk: Uint8Array) {\n        let chunkIndex = 0;\n        while (chunkIndex < chunk.length) {\n            const sizeToCopy = Math.min(this.bufferSize - this.bufferIndex, chunk.length - chunkIndex);\n            this.buffer.set(chunk.slice(chunkIndex, chunkIndex + sizeToCopy), this.bufferIndex);\n            chunkIndex += sizeToCopy;\n            this.bufferIndex += sizeToCopy;\n\n            if (this.bufferIndex === this.bufferSize) {\n                this.filledBuffers.push(this.buffer);\n                this.buffer = new Uint8Array(this.bufferSize);\n                this.bufferIndex = 0;\n            }\n        }\n    }\n\n    public isBufferReady(): boolean {\n        return this.filledBuffers.length > 0;\n    }\n\n    public consumeBuffer(): Uint8Array {\n        if (!this.isBufferReady()) {\n            throw new Error(\"Cannot send a partial buffer.\");\n        }\n        return this.filledBuffers.shift();\n    }\n\n    public getSamplingFormat(): string {\n        return SamplingFormat.samplingFormatToNumberType(this.samplingFormat) +\n        (8 * SamplingFormat.samplingFormatToByteCount(this.samplingFormat));\n    }\n}\n"],"sourceRoot":""}