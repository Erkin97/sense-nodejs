{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"grpc\"","webpack:///./proto/SenseClient_pb.js","webpack:///./src/Sense.ts","webpack:///./src/SamplingFormat.ts","webpack:///./src/SenseClient.ts","webpack:///./proto/SenseClient_grpc_pb.js","webpack:///external \"google-protobuf\"","webpack:///./src/FileSense.ts","webpack:///./src/StreamSense.ts","webpack:///./src/StreamChunkToBuffer.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","jspb","goog","global","Function","exportSymbol","proto","sense","full","v1","Request","opt_data","Message","initialize","this","inherits","DEBUG","COMPILED","displayName","GENERATE_TO_OBJECT","toObject","opt_includeInstance","includeInstance","msg","obj","data","getData_asB64","task","getFieldWithDefault","apikey","format","clientVersion","$jspbMessageInstance","deserializeBinary","bytes","reader","BinaryReader","deserializeBinaryFromReader","nextField","isEndGroup","getFieldNumber","readBytes","setData","readString","setTask","setApikey","setFormat","setClientVersion","skipField","serializeBinary","writer","BinaryWriter","serializeBinaryToWriter","getResultBuffer","message","f","undefined","getData_asU8","length","writeBytes","getTask","writeString","getApikey","getFormat","getClientVersion","getData","bytesAsB64","bytesAsU8","setProto3BytesField","setProto3StringField","RequestStream","dtype","sr","setDtype","readInt32","setSr","getDtype","getSr","writeInt32","setProto3IntField","Response","outputs","setOutputs","getOutputs","extend","grpc_1","Sense","[object Object]","callbackAdaptor","callback","error","response","json","JSON","parse","metadata","Metadata","timeout","Date","setSeconds","getSeconds","TIMEOUT","set","toString","SamplingFormat","samplingFormatToByteCount","samplingFormat","Int8Bit","Float8Bit","Int16Bit","Float16Bit","Int32Bit","Float32Bit","Int64Bit","Float64Bit","Error","samplingFormatToNumberType","SenseClient_grpc_pb_1","FileSense_1","SamplingFormat_1","StreamSense_1","SenseClient","apiKey","host","grpcClient","credentials","createInsecure","buffer","extension","AudioFileConnection","stream","samplingRate","AudioStreamConnection","grpc","SenseClient_pb","serialize_sense_full_v1_Response","arg","Buffer","from","deserialize_sense_full_v1_Response","buffer_arg","Uint8Array","SenseService","path","requestStream","responseStream","requestType","responseType","requestSerialize","requestDeserialize","responseSerialize","responseDeserialize","sense_stream","makeGenericClientConstructor","SenseClient_pb_1","Sense_1","super","sendData","timeOutMetadata","getTimeOut","requestsIterator","createRequestIterator","request","write","end","BUFFER_SIZE","segment","slice","StreamChunkToBuffer_1","rate","sendStream","onResult","streamChunkToBuffer","default","on","chunk","push","isBufferReady","consumeBuffer","dataType","getSamplingFormat","createRequest","closeGrpcConnection","closeOnError","err","StreamChunkToBuffer","bufferIndex","filledBuffers","samplingSize","bufferSize","SENDING_RATE","chunkIndex","sizeToCopy","Math","min","shift"],"mappings":"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","file":"SenseClient.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = require(\"grpc\");","/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\n\nvar jspb = require('google-protobuf');\nvar goog = jspb;\nvar global = Function('return this')();\n\ngoog.exportSymbol('proto.sense.full.v1.Request', null, global);\ngoog.exportSymbol('proto.sense.full.v1.RequestStream', null, global);\ngoog.exportSymbol('proto.sense.full.v1.Response', null, global);\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.sense.full.v1.Request = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.sense.full.v1.Request, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.sense.full.v1.Request.displayName = 'proto.sense.full.v1.Request';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.sense.full.v1.Request.prototype.toObject = function(opt_includeInstance) {\n  return proto.sense.full.v1.Request.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.sense.full.v1.Request} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.sense.full.v1.Request.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    data: msg.getData_asB64(),\n    task: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    apikey: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\n    format: jspb.Message.getFieldWithDefault(msg, 4, \"\"),\n    clientVersion: jspb.Message.getFieldWithDefault(msg, 8, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.sense.full.v1.Request}\n */\nproto.sense.full.v1.Request.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.sense.full.v1.Request;\n  return proto.sense.full.v1.Request.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.sense.full.v1.Request} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.sense.full.v1.Request}\n */\nproto.sense.full.v1.Request.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setData(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setTask(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setApikey(value);\n      break;\n    case 4:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setFormat(value);\n      break;\n    case 8:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setClientVersion(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.sense.full.v1.Request.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.sense.full.v1.Request.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.sense.full.v1.Request} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.sense.full.v1.Request.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getData_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getTask();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getApikey();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f = message.getFormat();\n  if (f.length > 0) {\n    writer.writeString(\n      4,\n      f\n    );\n  }\n  f = message.getClientVersion();\n  if (f.length > 0) {\n    writer.writeString(\n      8,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes data = 1;\n * @return {!(string|Uint8Array)}\n */\nproto.sense.full.v1.Request.prototype.getData = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes data = 1;\n * This is a type-conversion wrapper around `getData()`\n * @return {string}\n */\nproto.sense.full.v1.Request.prototype.getData_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getData()));\n};\n\n\n/**\n * optional bytes data = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getData()`\n * @return {!Uint8Array}\n */\nproto.sense.full.v1.Request.prototype.getData_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getData()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.sense.full.v1.Request.prototype.setData = function(value) {\n  jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional string task = 2;\n * @return {string}\n */\nproto.sense.full.v1.Request.prototype.getTask = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.sense.full.v1.Request.prototype.setTask = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional string apikey = 3;\n * @return {string}\n */\nproto.sense.full.v1.Request.prototype.getApikey = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/** @param {string} value */\nproto.sense.full.v1.Request.prototype.setApikey = function(value) {\n  jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n/**\n * optional string format = 4;\n * @return {string}\n */\nproto.sense.full.v1.Request.prototype.getFormat = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, \"\"));\n};\n\n\n/** @param {string} value */\nproto.sense.full.v1.Request.prototype.setFormat = function(value) {\n  jspb.Message.setProto3StringField(this, 4, value);\n};\n\n\n/**\n * optional string client_version = 8;\n * @return {string}\n */\nproto.sense.full.v1.Request.prototype.getClientVersion = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, \"\"));\n};\n\n\n/** @param {string} value */\nproto.sense.full.v1.Request.prototype.setClientVersion = function(value) {\n  jspb.Message.setProto3StringField(this, 8, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.sense.full.v1.RequestStream = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.sense.full.v1.RequestStream, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.sense.full.v1.RequestStream.displayName = 'proto.sense.full.v1.RequestStream';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.sense.full.v1.RequestStream.prototype.toObject = function(opt_includeInstance) {\n  return proto.sense.full.v1.RequestStream.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.sense.full.v1.RequestStream} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.sense.full.v1.RequestStream.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    data: msg.getData_asB64(),\n    task: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n    apikey: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\n    dtype: jspb.Message.getFieldWithDefault(msg, 5, \"\"),\n    sr: jspb.Message.getFieldWithDefault(msg, 6, 0),\n    clientVersion: jspb.Message.getFieldWithDefault(msg, 8, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.sense.full.v1.RequestStream}\n */\nproto.sense.full.v1.RequestStream.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.sense.full.v1.RequestStream;\n  return proto.sense.full.v1.RequestStream.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.sense.full.v1.RequestStream} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.sense.full.v1.RequestStream}\n */\nproto.sense.full.v1.RequestStream.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 1:\n      var value = /** @type {!Uint8Array} */ (reader.readBytes());\n      msg.setData(value);\n      break;\n    case 2:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setTask(value);\n      break;\n    case 3:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setApikey(value);\n      break;\n    case 5:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setDtype(value);\n      break;\n    case 6:\n      var value = /** @type {number} */ (reader.readInt32());\n      msg.setSr(value);\n      break;\n    case 8:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setClientVersion(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.sense.full.v1.RequestStream.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.sense.full.v1.RequestStream.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.sense.full.v1.RequestStream} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.sense.full.v1.RequestStream.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getData_asU8();\n  if (f.length > 0) {\n    writer.writeBytes(\n      1,\n      f\n    );\n  }\n  f = message.getTask();\n  if (f.length > 0) {\n    writer.writeString(\n      2,\n      f\n    );\n  }\n  f = message.getApikey();\n  if (f.length > 0) {\n    writer.writeString(\n      3,\n      f\n    );\n  }\n  f = message.getDtype();\n  if (f.length > 0) {\n    writer.writeString(\n      5,\n      f\n    );\n  }\n  f = message.getSr();\n  if (f !== 0) {\n    writer.writeInt32(\n      6,\n      f\n    );\n  }\n  f = message.getClientVersion();\n  if (f.length > 0) {\n    writer.writeString(\n      8,\n      f\n    );\n  }\n};\n\n\n/**\n * optional bytes data = 1;\n * @return {!(string|Uint8Array)}\n */\nproto.sense.full.v1.RequestStream.prototype.getData = function() {\n  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, \"\"));\n};\n\n\n/**\n * optional bytes data = 1;\n * This is a type-conversion wrapper around `getData()`\n * @return {string}\n */\nproto.sense.full.v1.RequestStream.prototype.getData_asB64 = function() {\n  return /** @type {string} */ (jspb.Message.bytesAsB64(\n      this.getData()));\n};\n\n\n/**\n * optional bytes data = 1;\n * Note that Uint8Array is not supported on all browsers.\n * @see http://caniuse.com/Uint8Array\n * This is a type-conversion wrapper around `getData()`\n * @return {!Uint8Array}\n */\nproto.sense.full.v1.RequestStream.prototype.getData_asU8 = function() {\n  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(\n      this.getData()));\n};\n\n\n/** @param {!(string|Uint8Array)} value */\nproto.sense.full.v1.RequestStream.prototype.setData = function(value) {\n  jspb.Message.setProto3BytesField(this, 1, value);\n};\n\n\n/**\n * optional string task = 2;\n * @return {string}\n */\nproto.sense.full.v1.RequestStream.prototype.getTask = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, \"\"));\n};\n\n\n/** @param {string} value */\nproto.sense.full.v1.RequestStream.prototype.setTask = function(value) {\n  jspb.Message.setProto3StringField(this, 2, value);\n};\n\n\n/**\n * optional string apikey = 3;\n * @return {string}\n */\nproto.sense.full.v1.RequestStream.prototype.getApikey = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, \"\"));\n};\n\n\n/** @param {string} value */\nproto.sense.full.v1.RequestStream.prototype.setApikey = function(value) {\n  jspb.Message.setProto3StringField(this, 3, value);\n};\n\n\n/**\n * optional string dtype = 5;\n * @return {string}\n */\nproto.sense.full.v1.RequestStream.prototype.getDtype = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, \"\"));\n};\n\n\n/** @param {string} value */\nproto.sense.full.v1.RequestStream.prototype.setDtype = function(value) {\n  jspb.Message.setProto3StringField(this, 5, value);\n};\n\n\n/**\n * optional int32 sr = 6;\n * @return {number}\n */\nproto.sense.full.v1.RequestStream.prototype.getSr = function() {\n  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));\n};\n\n\n/** @param {number} value */\nproto.sense.full.v1.RequestStream.prototype.setSr = function(value) {\n  jspb.Message.setProto3IntField(this, 6, value);\n};\n\n\n/**\n * optional string client_version = 8;\n * @return {string}\n */\nproto.sense.full.v1.RequestStream.prototype.getClientVersion = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, \"\"));\n};\n\n\n/** @param {string} value */\nproto.sense.full.v1.RequestStream.prototype.setClientVersion = function(value) {\n  jspb.Message.setProto3StringField(this, 8, value);\n};\n\n\n\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\nproto.sense.full.v1.Response = function(opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\ngoog.inherits(proto.sense.full.v1.Response, jspb.Message);\nif (goog.DEBUG && !COMPILED) {\n  proto.sense.full.v1.Response.displayName = 'proto.sense.full.v1.Response';\n}\n\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n/**\n * Creates an object representation of this proto suitable for use in Soy templates.\n * Field names that are reserved in JavaScript and will be renamed to pb_name.\n * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n * For the list of reserved names please see:\n *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.\n * @param {boolean=} opt_includeInstance Whether to include the JSPB instance\n *     for transitional soy proto support: http://goto/soy-param-migration\n * @return {!Object}\n */\nproto.sense.full.v1.Response.prototype.toObject = function(opt_includeInstance) {\n  return proto.sense.full.v1.Response.toObject(opt_includeInstance, this);\n};\n\n\n/**\n * Static version of the {@see toObject} method.\n * @param {boolean|undefined} includeInstance Whether to include the JSPB\n *     instance for transitional soy proto support:\n *     http://goto/soy-param-migration\n * @param {!proto.sense.full.v1.Response} msg The msg instance to transform.\n * @return {!Object}\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.sense.full.v1.Response.toObject = function(includeInstance, msg) {\n  var f, obj = {\n    outputs: jspb.Message.getFieldWithDefault(msg, 7, \"\")\n  };\n\n  if (includeInstance) {\n    obj.$jspbMessageInstance = msg;\n  }\n  return obj;\n};\n}\n\n\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.sense.full.v1.Response}\n */\nproto.sense.full.v1.Response.deserializeBinary = function(bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.sense.full.v1.Response;\n  return proto.sense.full.v1.Response.deserializeBinaryFromReader(msg, reader);\n};\n\n\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.sense.full.v1.Response} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.sense.full.v1.Response}\n */\nproto.sense.full.v1.Response.deserializeBinaryFromReader = function(msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n    var field = reader.getFieldNumber();\n    switch (field) {\n    case 7:\n      var value = /** @type {string} */ (reader.readString());\n      msg.setOutputs(value);\n      break;\n    default:\n      reader.skipField();\n      break;\n    }\n  }\n  return msg;\n};\n\n\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\nproto.sense.full.v1.Response.prototype.serializeBinary = function() {\n  var writer = new jspb.BinaryWriter();\n  proto.sense.full.v1.Response.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n\n\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.sense.full.v1.Response} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\nproto.sense.full.v1.Response.serializeBinaryToWriter = function(message, writer) {\n  var f = undefined;\n  f = message.getOutputs();\n  if (f.length > 0) {\n    writer.writeString(\n      7,\n      f\n    );\n  }\n};\n\n\n/**\n * optional string outputs = 7;\n * @return {string}\n */\nproto.sense.full.v1.Response.prototype.getOutputs = function() {\n  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, \"\"));\n};\n\n\n/** @param {string} value */\nproto.sense.full.v1.Response.prototype.setOutputs = function(value) {\n  jspb.Message.setProto3StringField(this, 7, value);\n};\n\n\ngoog.object.extend(exports, proto.sense.full.v1);\n","import { Metadata } from \"grpc\";\nimport { Response } from \"../proto/SenseClient_pb\";\n\nexport type CallbackType = (error: Error, result: any) => any;\n\nexport abstract class Sense {\n    private static TIMEOUT = 10; // in second\n\n    public abstract event(callback: CallbackType): void;\n    public abstract music(callback: CallbackType): void;\n    public abstract speech(callback: CallbackType): void;\n\n    protected callbackAdaptor = (callback: CallbackType) => (error: Error, response: Response) => {\n        if (error) {\n            callback(error, undefined);\n        } else {\n            const json = JSON.parse(response.getOutputs());\n            callback(error, json);\n        }\n    }\n\n    protected getTimeOut(): Metadata {\n        const metadata = new Metadata();\n        const timeout = new Date().setSeconds(new Date().getSeconds() + Sense.TIMEOUT);\n        metadata.set(\"deadline\", timeout.toString());\n        return metadata;\n    }\n}\n","export enum SamplingFormat {\n    Int64Bit,\n    Int32Bit,\n    Int16Bit,\n    Int8Bit,\n    Float64Bit,\n    Float32Bit,\n    Float16Bit,\n    Float8Bit,\n}\n\nexport namespace SamplingFormat {\n    export function samplingFormatToByteCount(samplingFormat: SamplingFormat): number {\n        switch (samplingFormat) {\n            case SamplingFormat.Int8Bit:\n            case SamplingFormat.Float8Bit:\n                return 1;\n            case SamplingFormat.Int16Bit:\n            case SamplingFormat.Float16Bit:\n                    return 2;\n            case SamplingFormat.Int32Bit:\n            case SamplingFormat.Float32Bit:\n                    return 4;\n            case SamplingFormat.Int64Bit:\n            case SamplingFormat.Float64Bit:\n                    return 8;\n            default:\n                throw new Error(\"Sampling format not recognized\");\n        }\n    }\n\n    export function samplingFormatToNumberType(samplingFormat: SamplingFormat): string {\n        switch (samplingFormat) {\n            case SamplingFormat.Int8Bit:\n            case SamplingFormat.Int16Bit:\n            case SamplingFormat.Int32Bit:\n            case SamplingFormat.Int64Bit:\n                    return \"int\";\n            case SamplingFormat.Float8Bit:\n            case SamplingFormat.Float16Bit:\n            case SamplingFormat.Float32Bit:\n            case SamplingFormat.Float64Bit:\n                    return \"float\";\n            default:\n                throw new Error(\"Sampling format not recognized\");\n        }\n    }\n}\n","import { credentials } from \"grpc\";\nimport { Readable } from \"stream\";\nimport { SenseClient as SenseClientGrpc } from \"../proto/SenseClient_grpc_pb\";\nimport { AudioFileConnection } from \"./FileSense\";\nimport { SamplingFormat } from \"./SamplingFormat\";\nimport { Sense } from \"./Sense\";\nimport { AudioStreamConnection } from \"./StreamSense\";\n\nexport { SamplingFormat };\n\nexport class SenseClient {\n    private grpcClient: SenseClientGrpc;\n    private apiKey: string;\n\n    constructor(apiKey: string, host: string = \"34.80.243.56:50051\") {\n        this.grpcClient = new SenseClientGrpc(host, credentials.createInsecure());\n        this.apiKey = apiKey;\n    }\n\n    public sendFile(buffer: Buffer, extension: string): Sense {\n        return new AudioFileConnection(buffer, extension, this.apiKey, this.grpcClient);\n    }\n\n    public sendStream(stream: Readable, samplingRate: number, samplingFormat: SamplingFormat): Sense {\n        return new AudioStreamConnection(stream, samplingRate, samplingFormat, this.apiKey, this.grpcClient);\n    }\n}\n","// GENERATED CODE -- DO NOT EDIT!\n\n// Original file comments:\n// Subin Lee (sblee@cochlear.ai)\n//\n// Copyright 2019 Cochlear.ai\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n'use strict';\nvar grpc = require('grpc');\nvar SenseClient_pb = require('./SenseClient_pb.js');\n\nfunction serialize_sense_full_v1_Request(arg) {\n  if (!(arg instanceof SenseClient_pb.Request)) {\n    throw new Error('Expected argument of type sense.full.v1.Request');\n  }\n  return Buffer.from(arg.serializeBinary());\n}\n\nfunction deserialize_sense_full_v1_Request(buffer_arg) {\n  return SenseClient_pb.Request.deserializeBinary(new Uint8Array(buffer_arg));\n}\n\nfunction serialize_sense_full_v1_RequestStream(arg) {\n  if (!(arg instanceof SenseClient_pb.RequestStream)) {\n    throw new Error('Expected argument of type sense.full.v1.RequestStream');\n  }\n  return Buffer.from(arg.serializeBinary());\n}\n\nfunction deserialize_sense_full_v1_RequestStream(buffer_arg) {\n  return SenseClient_pb.RequestStream.deserializeBinary(new Uint8Array(buffer_arg));\n}\n\nfunction serialize_sense_full_v1_Response(arg) {\n  if (!(arg instanceof SenseClient_pb.Response)) {\n    throw new Error('Expected argument of type sense.full.v1.Response');\n  }\n  return Buffer.from(arg.serializeBinary());\n}\n\nfunction deserialize_sense_full_v1_Response(buffer_arg) {\n  return SenseClient_pb.Response.deserializeBinary(new Uint8Array(buffer_arg));\n}\n\n\nvar SenseService = exports.SenseService = {\n  sense: {\n    path: '/sense.full.v1.Sense/sense',\n    requestStream: true,\n    responseStream: false,\n    requestType: SenseClient_pb.Request,\n    responseType: SenseClient_pb.Response,\n    requestSerialize: serialize_sense_full_v1_Request,\n    requestDeserialize: deserialize_sense_full_v1_Request,\n    responseSerialize: serialize_sense_full_v1_Response,\n    responseDeserialize: deserialize_sense_full_v1_Response,\n  },\n  sense_stream: {\n    path: '/sense.full.v1.Sense/sense_stream',\n    requestStream: true,\n    responseStream: true,\n    requestType: SenseClient_pb.RequestStream,\n    responseType: SenseClient_pb.Response,\n    requestSerialize: serialize_sense_full_v1_RequestStream,\n    requestDeserialize: deserialize_sense_full_v1_RequestStream,\n    responseSerialize: serialize_sense_full_v1_Response,\n    responseDeserialize: deserialize_sense_full_v1_Response,\n  },\n};\n\nexports.SenseClient = grpc.makeGenericClientConstructor(SenseService);\n","module.exports = require(\"google-protobuf\");","import { SenseClient as SenseClientGrpc } from \"../proto/SenseClient_grpc_pb\";\nimport { Request } from \"../proto/SenseClient_pb\";\nimport { CallbackType, Sense } from \"./Sense\";\n\nexport class AudioFileConnection extends Sense {\n    private static BUFFER_SIZE = 1024 * 1024; // 1 MB\n    private buffer: Buffer;\n    private extension: string;\n    private apiKey: string;\n    private grpcClient: SenseClientGrpc;\n\n    constructor(buffer: Buffer, extension: string, apiKey: string, grpcClient: SenseClientGrpc) {\n        super();\n        this.buffer = buffer;\n        this.extension = extension;\n        this.apiKey = apiKey;\n        this.grpcClient = grpcClient;\n    }\n\n    public event(callback: CallbackType) {\n        this.sendData(\"event\", callback);\n    }\n\n    public speech(callback: CallbackType) {\n        this.sendData(\"speech\", callback);\n    }\n\n    public music(callback: CallbackType) {\n        this.sendData(\"music\", callback);\n    }\n\n    private sendData(task: string, callback: CallbackType) {\n        const timeOutMetadata = this.getTimeOut();\n        const call = this.grpcClient.sense(timeOutMetadata, this.callbackAdaptor(callback));\n\n        const requestsIterator = this.createRequestIterator(task);\n        for ( const request of requestsIterator) {\n            call.write(request);\n        }\n        call.end();\n    }\n\n    private *createRequestIterator(task: string): IterableIterator<Request> {\n        const n = AudioFileConnection.BUFFER_SIZE;\n        for (let i = 0; i < this.buffer.length / n; i++) {\n            const segment = this.buffer.slice(i * n, (i + 1) * n);\n            const request = new Request();\n            request.setApikey(this.apiKey);\n            request.setData(segment);\n            request.setFormat(this.extension);\n            request.setTask(task);\n            yield request;\n        }\n        return;\n    }\n}\n","import { Readable } from \"stream\";\nimport { SenseClient as SenseClientGrpc } from \"../proto/SenseClient_grpc_pb\";\nimport { RequestStream, Response } from \"../proto/SenseClient_pb\";\nimport { SamplingFormat } from \"./SamplingFormat\";\nimport { CallbackType, Sense } from \"./Sense\";\nimport StreamChunkToBuffer from \"./StreamChunkToBuffer\";\n\nexport class AudioStreamConnection extends Sense {\n    private rate: number;\n    private apiKey: string;\n    private grpcClient: SenseClientGrpc;\n    private stream: Readable;\n    private samplingFormat: SamplingFormat;\n\n    constructor(stream: Readable,\n                rate: number,\n                samplingFormat: SamplingFormat,\n                apiKey: string,\n                grpcClient: SenseClientGrpc) {\n        super();\n        this.rate = rate;\n        this.apiKey = apiKey;\n        this.grpcClient = grpcClient;\n        this.stream = stream;\n        this.samplingFormat = samplingFormat;\n    }\n\n    public event(callback: CallbackType) {\n        this.sendStream(\"event\", callback);\n    }\n\n    public speech(callback: CallbackType) {\n        this.sendStream(\"speech\", callback);\n    }\n\n    public music(callback: CallbackType) {\n        this.sendStream(\"music\", callback);\n    }\n\n    private sendStream(task: string, callback: CallbackType) {\n        const timeOutMetadata = this.getTimeOut();\n        const call = this.grpcClient.sense_stream(timeOutMetadata);\n\n        const onResult = this.callbackAdaptor(callback);\n        const streamChunkToBuffer = new StreamChunkToBuffer(this.rate, this.samplingFormat);\n\n        this.stream.on(\"data\", (chunk: Uint8Array) => {\n            streamChunkToBuffer.push(chunk);\n            while (streamChunkToBuffer.isBufferReady()) {\n                const buffer = streamChunkToBuffer.consumeBuffer();\n                const dataType = streamChunkToBuffer.getSamplingFormat();\n                const request = this.createRequest(buffer, task, dataType);\n                call.write(request);\n            }\n        });\n\n        call.on(\"data\", (response: Response) => {\n            onResult(undefined, response);\n        });\n\n        const closeGrpcConnection = () => { call.end(); };\n\n        call.on(\"close\", closeGrpcConnection);\n        call.on(\"end\", closeGrpcConnection);\n        this.stream.on(\"close\", closeGrpcConnection);\n        this.stream.on(\"end\", closeGrpcConnection);\n\n        const closeOnError = (err: Error) => {\n            onResult(err, undefined);\n            closeGrpcConnection();\n        };\n\n        this.stream.on(\"error\", closeOnError);\n        call.on(\"error\", closeOnError);\n    }\n\n    private createRequest(buffer: Uint8Array, task: string, dataType: string): RequestStream {\n        const request = new RequestStream();\n        request.setApikey(this.apiKey);\n        request.setData(buffer);\n        request.setTask(task);\n        request.setSr(this.rate);\n        request.setDtype(dataType);\n        return request;\n    }\n}\n","import { SamplingFormat } from \"./SamplingFormat\";\n\nexport default class StreamChunkToBuffer {\n    private static readonly SENDING_RATE = 2; // Buffer will be 1/SENDING_RATE seconds long\n    private readonly bufferSize: number;\n    private buffer: Uint8Array;\n    private bufferIndex = 0;\n\n    private filledBuffers: Uint8Array[] = [];\n    private samplingFormat: SamplingFormat;\n\n    constructor(samplingRate: number, samplingFormat: SamplingFormat) {\n        // Sending every 0.5 second (Rate / 2) a 32bit information: 4 Bytes\n        const samplingSize = SamplingFormat.samplingFormatToByteCount(samplingFormat);\n        this.bufferSize = samplingRate * samplingSize / StreamChunkToBuffer.SENDING_RATE;\n        this.buffer = new Uint8Array(this.bufferSize);\n        this.samplingFormat = samplingFormat;\n    }\n\n    public push(chunk: Uint8Array) {\n        let chunkIndex = 0;\n        while (chunkIndex < chunk.length) {\n            const sizeToCopy = Math.min(this.bufferSize - this.bufferIndex, chunk.length - chunkIndex);\n            this.buffer.set(chunk.slice(chunkIndex, chunkIndex + sizeToCopy), this.bufferIndex);\n            chunkIndex += sizeToCopy;\n            this.bufferIndex += sizeToCopy;\n\n            if (this.bufferIndex === this.bufferSize) {\n                this.filledBuffers.push(this.buffer);\n                this.buffer = new Uint8Array(this.bufferSize);\n                this.bufferIndex = 0;\n            }\n        }\n    }\n\n    public isBufferReady(): boolean {\n        return this.filledBuffers.length > 0;\n    }\n\n    public consumeBuffer(): Uint8Array {\n        if (!this.isBufferReady()) {\n            throw new Error(\"Cannot send a partial buffer.\");\n        }\n        return this.filledBuffers.shift();\n    }\n\n    public getSamplingFormat(): string {\n        return SamplingFormat.samplingFormatToNumberType(this.samplingFormat) +\n        (8 * SamplingFormat.samplingFormatToByteCount(this.samplingFormat));\n    }\n}\n"],"sourceRoot":""}